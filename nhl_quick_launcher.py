#!/usr/bin/env python3
"""
üöÄ D√âMARRAGE RAPIDE NHL - LANCEUR UNIVERSEL
Script unique pour lancer tous les outils NHL d√©velopp√©s

Outils disponibles:
1. üìä Dashboard Unifi√© (API + Logos)
2. üìÖ Calendrier avec Logos
3. üé® Syst√®me Logos NHL seul
4. üîÆ Pr√©dicteur Calendrier Avanc√©
5. üì° API NHL Officielle
6. üéÆ Mode Simulation/Hybride
"""

import os
import sys
import subprocess
from datetime import datetime

class NHLQuickLauncher:
    """
    üöÄ LANCEUR RAPIDE NHL
    
    Interface unifi√©e pour tous les outils NHL:
    - Menu interactif
    - Lancement automatique
    - Ouverture navigateur
    - Logs temps r√©el
    """
    
    def __init__(self):
        print("üöÄ NHL D√âMARRAGE RAPIDE - LANCEUR UNIVERSEL")
        print("=" * 60)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        self.tools = {
            '1': {
                'name': 'üìä Dashboard NHL Unifi√©',
                'description': 'Interface compl√®te - API officielle + Logos + Stats temps r√©el',
                'script': 'nhl_unified_dashboard.py',
                'html_output': 'nhl_unified_dashboard.html',
                'icon': 'üöÄ'
            },
            '2': {
                'name': 'üìÖ Calendrier avec Logos NHL', 
                'description': 'Calendrier visuel - Matchs + Pr√©dictions + Logos officiels',
                'script': 'nhl_calendar_with_logos.py',
                'html_output': 'nhl_calendar_enhanced_logos.html',
                'icon': 'üìÖ'
            },
            '3': {
                'name': 'üé® Syst√®me Logos NHL',
                'description': 'G√©n√©rateur logos - 32 √©quipes + CSS + HTML exports',
                'script': 'nhl_logos_system.py',
                'html_output': 'nhl_logos_showcase.html',
                'icon': 'üé®'
            },
            '4': {
                'name': 'üîÆ Pr√©dicteur NHL Avanc√©',
                'description': 'IA Pr√©dictions - Algorithmes + Validation + Performance',
                'script': 'nhl_calendar_predictor.py', 
                'html_output': 'nhl_calendar_interactive.html',
                'icon': 'üîÆ'
            },
            '5': {
                'name': 'üì° Test API NHL Officielle',
                'description': 'Connexion API - Test endpoints + Donn√©es temps r√©el',
                'script': 'nhl_official_api.py',
                'html_output': None,  # Pas d'output HTML
                'icon': 'üì°'
            },
            '6': {
                'name': 'üéÆ Syst√®me Hybride',
                'description': 'Mode intelligent - API/Simulation selon disponibilit√©',
                'script': 'nhl_hybrid_system.py',
                'html_output': 'nhl_hybrid_dashboard.html',
                'icon': 'üéÆ'
            }
        }
        
    def show_menu(self):
        """Affiche menu principal"""
        
        print("\nüèí OUTILS NHL DISPONIBLES:")
        print("-" * 60)
        
        for key, tool in self.tools.items():
            icon = tool['icon']
            name = tool['name']
            desc = tool['description']
            
            # V√©rifier si le script existe
            script_exists = os.path.exists(tool['script'])
            status = "‚úÖ" if script_exists else "‚ùå"
            
            print(f"{key}. {status} {icon} {name}")
            print(f"   ‚îî‚îÄ {desc}")
            
            if not script_exists:
                print(f"   ‚îî‚îÄ ‚ö†Ô∏è  Script manquant: {tool['script']}")
            print()
        
        print("üîß OPTIONS SP√âCIALES:")
        print("a. üöÄ Lancer TOUT (Dashboard + Calendrier + Logos)")
        print("b. üåê Ouvrir tous les HTML dans le navigateur")
        print("c. üßπ Nettoyer fichiers temporaires")
        print("q. üö™ Quitter")
        print("-" * 60)
        
    def get_user_choice(self) -> str:
        """Demande choix utilisateur"""
        
        while True:
            choice = input("\nüëâ Votre choix (1-6, a, b, c, q): ").strip().lower()
            
            valid_choices = list(self.tools.keys()) + ['a', 'b', 'c', 'q']
            
            if choice in valid_choices:
                return choice
            else:
                print(f"‚ùå Choix invalide. Utilisez: {', '.join(valid_choices)}")
    
    def run_script(self, script_name: str, tool_name: str) -> bool:
        """Execute un script Python"""
        
        if not os.path.exists(script_name):
            print(f"‚ùå Script introuvable: {script_name}")
            return False
        
        print(f"\nüöÄ Lancement: {tool_name}")
        print(f"üìÑ Script: {script_name}")
        print("-" * 40)
        
        try:
            # Lancer script avec python3
            result = subprocess.run(
                [sys.executable, script_name],
                capture_output=False,  # Afficher output en temps r√©el
                text=True
            )
            
            if result.returncode == 0:
                print(f"\n‚úÖ {tool_name} - Termin√© avec succ√®s!")
                return True
            else:
                print(f"\n‚ùå {tool_name} - Erreur (code {result.returncode})")
                return False
                
        except Exception as e:
            print(f"\nüí• Erreur ex√©cution {tool_name}: {str(e)}")
            return False
    
    def open_html_files(self):
        """Ouvre tous les fichiers HTML g√©n√©r√©s"""
        
        print("\nüåê OUVERTURE FICHIERS HTML")
        print("-" * 40)
        
        html_files = []
        
        # Collecter fichiers HTML existants
        for tool in self.tools.values():
            if tool['html_output'] and os.path.exists(tool['html_output']):
                html_files.append(tool['html_output'])
        
        if not html_files:
            print("‚ùå Aucun fichier HTML trouv√©")
            print("üí° Lancez d'abord un outil pour g√©n√©rer des interfaces")
            return
        
        # Ouvrir chaque fichier
        for html_file in html_files:
            try:
                print(f"üåê Ouverture: {html_file}")
                
                if sys.platform.startswith('darwin'):  # macOS
                    subprocess.run(['open', html_file])
                elif sys.platform.startswith('win'):   # Windows
                    os.startfile(html_file)
                else:  # Linux
                    subprocess.run(['xdg-open', html_file])
                    
            except Exception as e:
                print(f"‚ùå Erreur ouverture {html_file}: {str(e)}")
        
        print(f"\n‚úÖ {len(html_files)} fichiers ouverts dans le navigateur!")
    
    def clean_temp_files(self):
        """Nettoie fichiers temporaires"""
        
        print("\nüßπ NETTOYAGE FICHIERS TEMPORAIRES")
        print("-" * 40)
        
        temp_patterns = [
            '*.pyc',
            '__pycache__',
            '*.log',
            '*.tmp',
            '.DS_Store'
        ]
        
        cleaned = 0
        
        try:
            import glob
            
            for pattern in temp_patterns:
                files = glob.glob(pattern, recursive=True)
                for file in files:
                    try:
                        if os.path.isfile(file):
                            os.remove(file)
                            print(f"üóëÔ∏è  Supprim√©: {file}")
                            cleaned += 1
                        elif os.path.isdir(file):
                            import shutil
                            shutil.rmtree(file)
                            print(f"üìÅ Dossier supprim√©: {file}")
                            cleaned += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è  Impossible de supprimer {file}: {str(e)}")
        
        except Exception as e:
            print(f"‚ùå Erreur nettoyage: {str(e)}")
        
        print(f"\n‚úÖ Nettoyage termin√© - {cleaned} √©l√©ments supprim√©s")
    
    def launch_all_main_tools(self):
        """Lance les 3 outils principaux"""
        
        print("\nüöÄ LANCEMENT COMPLET NHL")
        print("=" * 40)
        
        main_tools = ['1', '2', '3']  # Dashboard, Calendrier, Logos
        results = []
        
        for tool_key in main_tools:
            tool = self.tools[tool_key]
            
            print(f"\n{tool['icon']} {tool['name']}")
            print("=" * 30)
            
            success = self.run_script(tool['script'], tool['name'])
            results.append((tool['name'], success))
        
        # R√©sum√© final
        print("\n" + "=" * 50)
        print("üìä R√âSUM√â LANCEMENT COMPLET")
        print("=" * 50)
        
        for name, success in results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {name}")
        
        successful = sum(1 for _, success in results if success)
        print(f"\nüéØ Succ√®s: {successful}/{len(results)} outils")
        
        if successful > 0:
            print("\nüåê Ouverture automatique des interfaces...")
            self.open_html_files()
    
    def run(self):
        """Boucle principale du lanceur"""
        
        try:
            while True:
                self.show_menu()
                choice = self.get_user_choice()
                
                if choice == 'q':
                    print("\nüëã Au revoir! Bonne analyse NHL!")
                    break
                
                elif choice == 'a':
                    self.launch_all_main_tools()
                
                elif choice == 'b':
                    self.open_html_files()
                
                elif choice == 'c':
                    self.clean_temp_files()
                
                elif choice in self.tools:
                    tool = self.tools[choice]
                    success = self.run_script(tool['script'], tool['name'])
                    
                    # Si succ√®s et fichier HTML existe, proposer ouverture
                    if success and tool['html_output'] and os.path.exists(tool['html_output']):
                        open_choice = input(f"\nüåê Ouvrir {tool['html_output']} ? (y/n): ").strip().lower()
                        if open_choice == 'y':
                            try:
                                if sys.platform.startswith('darwin'):
                                    subprocess.run(['open', tool['html_output']])
                                elif sys.platform.startswith('win'):
                                    os.startfile(tool['html_output'])
                                else:
                                    subprocess.run(['xdg-open', tool['html_output']])
                                print("‚úÖ Interface ouverte!")
                            except Exception as e:
                                print(f"‚ùå Erreur ouverture: {str(e)}")
                
                # Pause avant retour menu
                input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour continuer...")
                print("\n" * 2)  # Espace visuel
                
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Interruption utilisateur")
            print("üëã Au revoir!")
        except Exception as e:
            print(f"\nüí• Erreur inattendue: {str(e)}")
        finally:
            print(f"\nüèÅ Session termin√©e - {datetime.now().strftime('%H:%M:%S')}")

def main():
    """Point d'entr√©e principal"""
    
    # Changer vers r√©pertoire script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_dir)
    
    # Lancer interface
    launcher = NHLQuickLauncher()
    launcher.run()

if __name__ == "__main__":
    main()
