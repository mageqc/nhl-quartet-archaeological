#!/usr/bin/env python3
"""
üöÄ SYST√àME HYBRIDE GROK + GEMINI - NHL PROFIT MACHINE
Bas√© sur analyse comparative Grok vs Gemini pour DOMINATION TOTALE

INNOVATIONS GROK:
- XGBoost + Random Forest stacking (accuracy 65%+)
- Kelly ajust√© corr√©lation parlays NHL (corr ~0.2)  
- Sentiment X int√©gr√© (hype Demidov/Hutson +7% EV)
- Stop-loss quantifi√© (>10% drawdown = pause 3 jours)
- Focus pr√©saison MTL: 6 matchs, rookies variance +40%
"""

import sqlite3
import json
import urllib.request
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

class HybridMLPredictor:
    """
    ü§ñ PR√âDICTEUR HYBRIDE GROK + GEMINI
    
    - Random Forest pour patterns (recommandation Gemini)
    - XGBoost pour stacking (recommandation Grok)
    - Sentiment X int√©gr√© (hype prospects MTL)
    - Sp√©cialisation pr√©saison (variance rookies)
    """
    
    def __init__(self):
        print("ü§ñ INITIALISATION HYBRID ML GROK + GEMINI")
        
        self.rf = RandomForestClassifier(n_estimators=100, random_state=42)
        self.xgb = GradientBoostingClassifier(n_estimators=100, random_state=42)
        self.stacking = None
        
        # Patterns Gemini identifi√©s
        self.patterns = {
            'montreal_weakness_vs_original_six': -0.12,  # MTL -12% vs BOS/TOR
            'rookie_variance_presaison': 0.40,           # Variance 40% vs 15% v√©t√©rans
            'same_night_correlation': 0.2,               # Corr√©lation NHL parlays
            'demidov_hutson_hype': 0.07                  # Hype X prospects +7%
        }
        
        print("‚úÖ Patterns Grok int√©gr√©s:")
        for pattern, value in self.patterns.items():
            print(f"   üìä {pattern}: {value:+.2%}")
    
    def generate_training_data(self) -> pd.DataFrame:
        """G√©n√®re donn√©es training avec features Grok + Gemini"""
        
        print("üìä G√©n√©ration donn√©es training hybrides...")
        
        # Simulation donn√©es 2023-24 avec patterns identifi√©s
        np.random.seed(42)
        n_games = 500
        
        data = {
            'xG_diff': np.random.normal(0, 0.5, n_games),           # Expected Goals diff
            'rookie_pct': np.random.uniform(0, 0.6, n_games),       # % rookies lineup
            'fatigue': np.random.uniform(0, 1, n_games),            # Back-to-back factor
            'sentiment_score': np.random.uniform(0.3, 1.0, n_games), # Sentiment X (0-1)
            'vs_original_six': np.random.choice([0, 1], n_games, p=[0.8, 0.2]), # vs BOS/TOR/NYR/CHI/DET/MTL
            'is_montreal': np.random.choice([0, 1], n_games, p=[0.97, 0.03]),   # Team is MTL
        }
        
        df = pd.DataFrame(data)
        
        # Target: home_win bas√© sur features + patterns Grok
        base_prob = 0.52  # Home advantage baseline
        
        # Application patterns
        prob_adjustments = (
            df['xG_diff'] * 0.3 +                                    # xG impact
            df['rookie_pct'] * self.patterns['rookie_variance_presaison'] + # Rookie variance
            -df['fatigue'] * 0.1 +                                   # Fatigue n√©gative
            df['sentiment_score'] * 0.1 +                            # Sentiment boost
            df['vs_original_six'] * df['is_montreal'] * self.patterns['montreal_weakness_vs_original_six'] + # MTL weakness
            df['sentiment_score'] * df['rookie_pct'] * self.patterns['demidov_hutson_hype'] # Hype prospects
        )
        
        win_prob = base_prob + prob_adjustments
        win_prob = np.clip(win_prob, 0.15, 0.85)  # Realistic bounds
        
        df['home_win'] = (np.random.uniform(0, 1, n_games) < win_prob).astype(int)
        
        print(f"‚úÖ {len(df)} matchs g√©n√©r√©s avec patterns Grok")
        return df
    
    def train_hybrid(self, df: pd.DataFrame = None):
        """Entra√Æne syst√®me hybride avec stacking Grok + Gemini"""
        
        if df is None:
            df = self.generate_training_data()
        
        print("üöÄ ENTRA√éNEMENT SYST√àME HYBRIDE...")
        
        # Features selon sp√©cifications Grok
        feature_cols = ['xG_diff', 'rookie_pct', 'fatigue', 'sentiment_score', 'vs_original_six']
        X = df[feature_cols]
        y = df['home_win']
        
        # Split train/test
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # √âtape 1: Entra√Æner mod√®les de base
        print("üìà Entra√Ænement Random Forest (patterns Gemini)...")
        self.rf.fit(X_train, y_train)
        rf_accuracy = accuracy_score(y_test, self.rf.predict(X_test))
        
        print("üìà Entra√Ænement XGBoost (boost Grok)...")
        self.xgb.fit(X_train, y_train)
        xgb_accuracy = accuracy_score(y_test, self.xgb.predict(X_test))
        
        # √âtape 2: Stacking (recommandation Gemini + Grok)
        print("üîÑ Cr√©ation stacking ensemble...")
        
        # Pr√©dictions base pour stacking
        rf_train_pred = self.rf.predict_proba(X_train)[:, 1]
        xgb_train_pred = self.xgb.predict_proba(X_train)[:, 1]
        
        stack_X_train = pd.DataFrame({
            'rf_pred': rf_train_pred,
            'xgb_pred': xgb_train_pred
        })
        
        # Meta-learner
        self.stacking = GradientBoostingClassifier(n_estimators=50, random_state=42)
        self.stacking.fit(stack_X_train, y_train)
        
        # √âvaluation finale
        rf_test_pred = self.rf.predict_proba(X_test)[:, 1]
        xgb_test_pred = self.xgb.predict_proba(X_test)[:, 1]
        
        stack_X_test = pd.DataFrame({
            'rf_pred': rf_test_pred,
            'xgb_pred': xgb_test_pred
        })
        
        hybrid_accuracy = accuracy_score(y_test, self.stacking.predict(stack_X_test))
        
        print("üéØ R√âSULTATS ENTRA√éNEMENT:")
        print(f"   üìä Random Forest: {rf_accuracy:.2%}")
        print(f"   üìä XGBoost: {xgb_accuracy:.2%}")
        print(f"   üèÜ Hybrid Stacking: {hybrid_accuracy:.2%}")
        print(f"   üéØ Target Grok: 65%+ ({'‚úÖ' if hybrid_accuracy >= 0.65 else '‚ö†Ô∏è'})")
        
        return hybrid_accuracy
    
    def predict_presaison_mtl(self, features: Dict = None) -> float:
        """Pr√©dit match pr√©saison MTL avec hype Demidov/Hutson"""
        
        if features is None:
            # Defaults pour pr√©saison MTL (hype Demidov selon Grok)
            features = {
                'xG_diff': 0.3,        # MTL l√©g√®rement avantag√© home
                'rookie_pct': 0.4,     # 40% rookies pr√©saison
                'fatigue': 0.0,        # Repos pr√©saison
                'sentiment_score': 0.8, # HYPE Demidov/Hutson massif
                'vs_original_six': 0   # Par d√©faut non-Original Six
            }
        
        print(f"üèí PR√âDICTION PR√âSAISON MTL avec features: {features}")
        
        # Convertir en DataFrame
        X = pd.DataFrame([features])
        
        # Pr√©dictions mod√®les base
        rf_prob = self.rf.predict_proba(X)[:, 1][0]
        xgb_prob = self.xgb.predict_proba(X)[:, 1][0]
        
        # Stacking final
        stack_X = pd.DataFrame({
            'rf_pred': [rf_prob],
            'xgb_pred': [xgb_prob]
        })
        
        final_prob = self.stacking.predict_proba(stack_X)[:, 1][0]
        
        print(f"üéØ R√âSULTAT:")
        print(f"   üìä Random Forest: {rf_prob:.2%}")
        print(f"   üìä XGBoost: {xgb_prob:.2%}")
        print(f"   üèÜ Hybrid Final: {final_prob:.2%}")
        
        # Ajustement hype si rookies + sentiment √©lev√©s (pattern Grok)
        if features.get('rookie_pct', 0) > 0.3 and features.get('sentiment_score', 0) > 0.7:
            hype_bonus = self.patterns['demidov_hutson_hype']
            final_prob = min(0.85, final_prob + hype_bonus)
            print(f"   üöÄ Bonus hype Demidov/Hutson: +{hype_bonus:.1%}")
            print(f"   üí∞ Prob finale ajust√©e: {final_prob:.2%}")
        
        return final_prob

class AdvancedKellyManager:
    """
    üí∞ GESTION KELLY AVANC√âE SELON GROK
    
    - Kelly ajust√© corr√©lation parlays (corr NHL ~0.2)
    - Stop-loss quantifi√© (>10% drawdown = pause)
    - Conservative 10% Kelly pour limiter variance
    """
    
    def __init__(self, bankroll: float = 1000, corr_factor: float = 0.2):
        print("üí∞ INITIALISATION KELLY AVANC√â GROK")
        
        self.initial_bankroll = bankroll
        self.current_bankroll = bankroll
        self.corr_factor = corr_factor
        self.drawdown_threshold = 0.10  # 10% selon Grok
        self.consecutive_losses = 0
        self.is_paused = False
        self.pause_until = None
        
        print(f"   üíµ Bankroll initial: ${bankroll:,.2f}")
        print(f"   üìä Corr√©lation NHL: {corr_factor:.1%}")
        print(f"   üõ°Ô∏è Stop-loss: {self.drawdown_threshold:.0%}")
    
    def check_stop_loss(self) -> bool:
        """V√©rifie conditions stop-loss Grok"""
        
        current_drawdown = 1 - (self.current_bankroll / self.initial_bankroll)
        
        if current_drawdown > self.drawdown_threshold:
            self.is_paused = True
            self.pause_until = datetime.now() + timedelta(days=3)
            
            print("üö® STOP-LOSS D√âCLENCH√â!")
            print(f"   üìâ Drawdown: {current_drawdown:.1%}")
            print(f"   ‚è∏Ô∏è Pause jusqu'au: {self.pause_until.strftime('%Y-%m-%d')}")
            
            return True
        
        return False
    
    def kelly_single_bet(self, prob: float, decimal_odds: float) -> float:
        """Kelly simple avec conservative 10% factor"""
        
        if self.check_stop_loss():
            return 0
        
        # Kelly formula: f = (prob * odds - 1) / (odds - 1)
        if decimal_odds <= 1:
            return 0
        
        kelly_f = (prob * decimal_odds - 1) / (decimal_odds - 1)
        
        # Conservative: 10% du Kelly calcul√© (Grok spec)
        conservative_f = kelly_f * 0.10
        
        # Cap maximum 5% bankroll
        final_f = max(0, min(conservative_f, 0.05))
        
        bet_amount = self.current_bankroll * final_f
        
        print(f"üí∞ KELLY SINGLE:")
        print(f"   üéØ Prob: {prob:.2%}, Odds: {decimal_odds:.2f}")
        print(f"   üìä Kelly raw: {kelly_f:.2%}")
        print(f"   üõ°Ô∏è Kelly conservative: {final_f:.2%}")
        print(f"   üíµ Bet: ${bet_amount:.2f}")
        
        return bet_amount
    
    def kelly_parlay(self, probs: List[float], decimal_odds_list: List[float]) -> float:
        """Kelly parlay ajust√© corr√©lation NHL (innovation Grok)"""
        
        if self.check_stop_loss():
            return 0
        
        print(f"üé≤ KELLY PARLAY (Corr√©lation NHL: {self.corr_factor:.1%})")
        
        # Base Kelly multi-bet
        base_f = 0
        for prob, odds in zip(probs, decimal_odds_list):
            if odds > 1:
                base_f += (prob * odds - 1) / (odds - 1)
        
        # Ajustement corr√©lation Grok (reduce variance)
        corr_adjusted_f = base_f * (1 - self.corr_factor)
        
        # Extra conservative pour parlays (5% du Kelly)
        parlay_f = corr_adjusted_f * 0.05
        
        # Cap strict 3% bankroll pour parlays
        final_f = max(0, min(parlay_f, 0.03))
        
        bet_amount = self.current_bankroll * final_f
        
        print(f"   üìä Base Kelly: {base_f:.2%}")
        print(f"   üîó Ajust√© corr√©lation: {corr_adjusted_f:.2%}")
        print(f"   üõ°Ô∏è Final conservative: {final_f:.2%}")
        print(f"   üíµ Parlay bet: ${bet_amount:.2f}")
        
        return bet_amount
    
    def update_bankroll(self, result: float):
        """Met √† jour bankroll apr√®s r√©sultat"""
        
        self.current_bankroll += result
        
        if result < 0:
            self.consecutive_losses += 1
        else:
            self.consecutive_losses = 0
        
        roi = (self.current_bankroll / self.initial_bankroll - 1) * 100
        
        print(f"üíº BANKROLL UPDATE:")
        print(f"   üíµ Nouveau bankroll: ${self.current_bankroll:,.2f}")
        print(f"   üìà ROI: {roi:+.1f}%")
        print(f"   üî• Pertes cons√©cutives: {self.consecutive_losses}")

class NHLHybridProfitSystem:
    """
    üèÜ SYST√àME COMPLET GROK + GEMINI
    
    Combine:
    - ML Hybride (Random Forest + XGBoost + Stacking)
    - Kelly avanc√© avec corr√©lation
    - Sentiment X int√©gr√©
    - Focus pr√©saison MTL (Demidov/Hutson hype)
    """
    
    def __init__(self, bankroll: float = 1000):
        print("üöÄ SYST√àME HYBRID GROK + GEMINI - INITIALISATION")
        print("=" * 60)
        
        self.ml_predictor = HybridMLPredictor()
        self.kelly_manager = AdvancedKellyManager(bankroll)
        
        # Calendrier pr√©saison MTL selon Grok
        self.mtl_presaison_games = [
            {'date': '2025-09-22', 'opponent': 'Pittsburgh Penguins', 'home': True, 'hype_factor': 0.8},
            {'date': '2025-09-23', 'opponent': 'Philadelphia Flyers', 'home': True, 'hype_factor': 0.7},
            {'date': '2025-09-25', 'opponent': 'Toronto Maple Leafs', 'home': True, 'hype_factor': 0.9},  # vs Original Six
            {'date': '2025-09-27', 'opponent': 'Toronto Maple Leafs', 'home': False, 'hype_factor': 0.6}, # Away vs rival
            {'date': '2025-09-30', 'opponent': 'Ottawa Senators', 'home': False, 'hype_factor': 0.8, 'venue': 'Quebec City'},
            {'date': '2025-10-04', 'opponent': 'Ottawa Senators', 'home': True, 'hype_factor': 0.7}
        ]
        
        print(f"üìÖ {len(self.mtl_presaison_games)} matchs pr√©saison MTL charg√©s")
    
    def train_system(self):
        """Entra√Æne syst√®me complet"""
        
        print("\nüéØ ENTRA√éNEMENT SYST√àME HYBRID...")
        accuracy = self.ml_predictor.train_hybrid()
        
        print(f"‚úÖ Syst√®me entra√Æn√© - Accuracy: {accuracy:.2%}")
        return accuracy >= 0.65  # Target Grok
    
    def analyze_presaison_complete(self) -> List[Dict]:
        """Analyse compl√®te pr√©saison avec toutes innovations Grok"""
        
        print("\nüèí ANALYSE PR√âSAISON MTL - SYST√àME HYBRID GROK + GEMINI")
        print("=" * 60)
        
        value_bets = []
        
        for game in self.mtl_presaison_games:
            print(f"\nüìÖ {game['date']}: MTL {'vs' if game['home'] else '@'} {game['opponent']}")
            
            # Features sp√©cifiques au match
            features = {
                'xG_diff': 0.2 if game['home'] else -0.1,  # Home advantage
                'rookie_pct': 0.4,  # Pr√©saison = beaucoup rookies
                'fatigue': 0.0,     # Pr√©saison = repos
                'sentiment_score': game['hype_factor'],  # Hype Demidov/Hutson
                'vs_original_six': 1 if 'Toronto' in game['opponent'] else 0  # Pattern Gemini
            }
            
            # Pr√©diction ML hybride
            win_prob = self.ml_predictor.predict_presaison_mtl(features)
            
            # Simulation odds (remplacer par The Odds API)
            if win_prob > 0.55:
                american_odds = -120  # Favoris
            else:
                american_odds = +110  # Underdog
            
            decimal_odds = (100 / abs(american_odds)) + 1 if american_odds < 0 else (american_odds / 100) + 1
            
            # Calcul EV
            ev = (win_prob * decimal_odds) - 1
            
            # Kelly bet sizing
            bet_amount = self.kelly_manager.kelly_single_bet(win_prob, decimal_odds)
            
            print(f"üéØ Odds: {american_odds:+d} ({decimal_odds:.2f})")
            print(f"üí∞ Expected Value: {ev:+.2%}")
            print(f"üíµ Kelly bet: ${bet_amount:.2f}")
            
            # Value bet si EV > 5%
            if ev > 0.05 and bet_amount > 0:
                value_bet = {
                    'date': game['date'],
                    'match': f"MTL {'vs' if game['home'] else '@'} {game['opponent']}",
                    'win_prob': win_prob,
                    'odds': american_odds,
                    'decimal_odds': decimal_odds,
                    'expected_value': ev,
                    'bet_amount': bet_amount,
                    'potential_profit': bet_amount * (decimal_odds - 1),
                    'hype_factor': game['hype_factor']
                }
                
                value_bets.append(value_bet)
                print("‚úÖ VALUE BET D√âTECT√â!")
            else:
                print("‚ùå No value")
        
        return value_bets
    
    def simulate_parlay_strategy(self, games_subset: List[Dict]) -> Dict:
        """Simule strat√©gie parlay avec corr√©lation Grok"""
        
        print(f"\nüé≤ SIMULATION PARLAY - {len(games_subset)} matchs")
        
        probs = [game['win_prob'] for game in games_subset]
        odds = [game['decimal_odds'] for game in games_subset]
        
        # Kelly parlay avec corr√©lation
        parlay_bet = self.kelly_manager.kelly_parlay(probs, odds)
        
        # Calcul parlay odds et EV
        parlay_odds = np.prod(odds)
        parlay_prob = np.prod(probs) * (1 - self.kelly_manager.corr_factor)  # Ajustement corr
        parlay_ev = (parlay_prob * parlay_odds) - 1
        
        return {
            'bet_amount': parlay_bet,
            'parlay_odds': parlay_odds,
            'parlay_prob': parlay_prob,
            'expected_value': parlay_ev,
            'potential_payout': parlay_bet * parlay_odds,
            'games': [g['match'] for g in games_subset]
        }

def main():
    """Lance syst√®me hybrid complet"""
    
    print("üöÄ LANCEMENT SYST√àME HYBRID GROK + GEMINI NHL")
    print("üéØ Objectif: ROI 5-10% mensuel via ML + Kelly avanc√©")
    print("=" * 70)
    
    # Initialiser syst√®me
    system = NHLHybridProfitSystem(bankroll=1000)
    
    # Entra√Æner ML
    if system.train_system():
        print("‚úÖ Syst√®me ML valid√© (65%+ accuracy)")
    else:
        print("‚ö†Ô∏è Accuracy < 65% - Ajustements requis")
    
    # Analyser pr√©saison
    value_bets = system.analyze_presaison_complete()
    
    print(f"\nüèÜ R√âSULTATS ANALYSE PR√âSAISON:")
    print(f"üíé Value bets d√©tect√©s: {len(value_bets)}")
    
    if value_bets:
        total_stakes = sum(bet['bet_amount'] for bet in value_bets)
        total_ev = sum(bet['expected_value'] * bet['bet_amount'] for bet in value_bets)
        avg_ev = sum(bet['expected_value'] for bet in value_bets) / len(value_bets)
        
        print(f"üí∞ Capital total recommand√©: ${total_stakes:.2f}")
        print(f"üìà EV pond√©r√© total: ${total_ev:+.2f}")
        print(f"üéØ EV moyen: {avg_ev:+.2%}")
        
        # Test parlay sur top 2 bets
        if len(value_bets) >= 2:
            top_bets = sorted(value_bets, key=lambda x: x['expected_value'], reverse=True)[:2]
            parlay_result = system.simulate_parlay_strategy(top_bets)
            
            print(f"\nüé≤ PARLAY SIMULATION (Top 2):")
            print(f"   üíµ Bet: ${parlay_result['bet_amount']:.2f}")
            print(f"   üéØ EV: {parlay_result['expected_value']:+.2%}")
            print(f"   üí∞ Payout potentiel: ${parlay_result['potential_payout']:.2f}")
    
    print("\nüéØ PROCHAINES √âTAPES:")
    print("1. üîë Int√©grer The Odds API pour vraies cotes")
    print("2. üê¶ Ajouter sentiment X real-time (Twitter API)")
    print("3. üß™ Premier test 22 sept MTL vs PIT")
    print("4. üìä Tracking ROI quotidien")
    
    print(f"\n‚úÖ SYST√àME HYBRID OP√âRATIONNEL!")
    print("üèÜ Grok + Gemini = DOMINATION TOTALE!")

if __name__ == "__main__":
    main()
