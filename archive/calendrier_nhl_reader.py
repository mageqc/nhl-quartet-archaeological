#!/usr/bin/env python3
"""
üìÖ EXTRACTEUR CALENDRIER NHL v4.8 OPTIMIS√â
==========================================

Script sp√©cialis√© pour lire et afficher le calendrier NHL de fa√ßon lisible.
Supporte les formats JSON, CSV et base de donn√©es SQLite.

Usage:
    python3 calendrier_nhl_reader.py [fichier]
    
Si aucun fichier sp√©cifi√©, cherche automatiquement le plus r√©cent.
"""

import sqlite3
import json
import csv
import os
import glob
from datetime import datetime
from typing import Dict, List, Optional

class CalendrierNHLReader:
    """Lecteur optimis√© pour calendriers NHL v4.8"""
    
    def __init__(self):
        self.formats_supported = ['.json', '.csv', '.db']
        self.current_dir = os.getcwd()
    
    def find_latest_calendar_file(self) -> Optional[str]:
        """Trouve automatiquement le fichier calendrier le plus r√©cent"""
        patterns = [
            'nhl_calendar_v4.8_simplified_*.json',
            'nhl_calendar_v4.8_complete_*.json',
            'nhl_calendar_v4.8_export_*.csv',
            'nhl_calendar_v4.8_optimized.db'
        ]
        
        latest_file = None
        latest_time = 0
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file in files:
                file_time = os.path.getmtime(file)
                if file_time > latest_time:
                    latest_time = file_time
                    latest_file = file
        
        return latest_file
    
    def read_json_calendar(self, filename: str) -> Dict:
        """Lit un calendrier JSON (simplifi√© ou complet)"""
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # D√©tecter le format (simplifi√© vs complet)
        if 'nhl_calendar_v48' in data:
            return self.process_simplified_json(data)
        elif 'calendar_summary' in data:
            return self.process_complete_json(data)
        else:
            return {"error": "Format JSON non reconnu"}
    
    def process_simplified_json(self, data: Dict) -> Dict:
        """Traite le JSON simplifi√© format calendrier"""
        calendar_data = data['nhl_calendar_v48']
        
        result = {
            'format': 'json_simplified',
            'summary': calendar_data['summary'],
            'weeks': []
        }
        
        for week_key, games in calendar_data['weekly_calendar'].items():
            week_num = int(week_key.split('_')[1])
            week_data = {
                'week_number': week_num,
                'games_count': len(games),
                'total_profit': sum(float(g['profit_potential'].replace('$', '')) for g in games),
                'games': games
            }
            result['weeks'].append(week_data)
        
        # Trier par semaine
        result['weeks'].sort(key=lambda x: x['week_number'])
        return result
    
    def process_complete_json(self, data: Dict) -> Dict:
        """Traite le JSON complet avec toutes les donn√©es"""
        summary = data['calendar_summary']
        weekly = data.get('weekly_breakdown', {})
        recommendations = data.get('recommendations', [])
        
        result = {
            'format': 'json_complete',
            'summary': {
                'total_games_analyzed': summary['total_games_analyzed'],
                'quality_recommendations': summary['quality_recommendations'],
                'selection_rate': f"{summary['selection_rate']}%",
                'total_potential_profit': f"${summary['total_potential_profit']:.2f}"
            },
            'weeks': []
        }
        
        # Organiser par semaines
        weeks_data = {}
        for rec in recommendations:
            week = rec['week_of_season']
            if week not in weeks_data:
                weeks_data[week] = []
            weeks_data[week].append({
                'date': rec['game_date'],
                'matchup': f"{rec['away_team']} @ {rec['home_team']}",
                'bet': rec['bet_type'],
                'confidence': f"{rec['confidence']:.1%}",
                'expected_value': f"{rec['expected_value']:+.2f}",
                'profit_potential': f"${rec['potential_profit']:.2f}",
                'risk': rec['risk_level'],
                'priority': rec['calendar_priority'],
                'reasoning': rec['reasoning']
            })
        
        for week_num in sorted(weeks_data.keys()):
            games = weeks_data[week_num]
            total_profit = sum(float(g['profit_potential'].replace('$', '')) for g in games)
            
            result['weeks'].append({
                'week_number': week_num,
                'games_count': len(games),
                'total_profit': total_profit,
                'games': games
            })
        
        return result
    
    def read_csv_calendar(self, filename: str) -> Dict:
        """Lit un calendrier CSV"""
        result = {
            'format': 'csv',
            'summary': {'total_recommendations': 0, 'total_potential_profit': 0},
            'weeks': []
        }
        
        weeks_data = {}
        
        with open(filename, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                week = int(row['Semaine'])
                if week not in weeks_data:
                    weeks_data[week] = []
                
                profit = float(row['Profit Potentiel'].replace('$', ''))
                
                weeks_data[week].append({
                    'date': row['Date'],
                    'matchup': f"{row['√âquipe Visiteur']} @ {row['√âquipe Domicile']}",
                    'bet': row['Type Pari'],
                    'confidence': f"{float(row['Confidence']):.1%}",
                    'expected_value': f"{float(row['Valeur Attendue']):+.2f}",
                    'profit_potential': f"${profit:.2f}",
                    'risk': row['Risque'],
                    'priority': int(row['Priorit√©']),
                    'reasoning': row['Raisonnement']
                })
                
                result['summary']['total_recommendations'] += 1
                result['summary']['total_potential_profit'] += profit
        
        # Organiser par semaines
        for week_num in sorted(weeks_data.keys()):
            games = weeks_data[week_num]
            total_profit = sum(float(g['profit_potential'].replace('$', '')) for g in games)
            
            result['weeks'].append({
                'week_number': week_num,
                'games_count': len(games),
                'total_profit': total_profit,
                'games': games
            })
        
        return result
    
    def read_db_calendar(self, filename: str) -> Dict:
        """Lit un calendrier depuis la base SQLite"""
        conn = sqlite3.connect(filename)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT game_date, week_of_season, home_team, away_team, game_time,
                   bet_type, confidence, expected_value, kelly_fraction,
                   potential_profit, risk_level, reasoning, quality_score,
                   calendar_priority
            FROM nhl_calendar_recommendations
            ORDER BY game_date, quality_score DESC
        ''')
        
        rows = cursor.fetchall()
        conn.close()
        
        if not rows:
            return {'format': 'db', 'summary': {'total_recommendations': 0}, 'weeks': []}
        
        result = {
            'format': 'database',
            'summary': {'total_recommendations': len(rows), 'total_potential_profit': 0},
            'weeks': []
        }
        
        weeks_data = {}
        
        for row in rows:
            (date, week, home, away, time, bet_type, conf, ev, kelly, 
             profit, risk, reasoning, quality, priority) = row
            
            if week not in weeks_data:
                weeks_data[week] = []
            
            weeks_data[week].append({
                'date': date,
                'matchup': f"{away} @ {home}",
                'bet': bet_type,
                'confidence': f"{conf:.1%}",
                'expected_value': f"{ev:+.2f}",
                'profit_potential': f"${profit:.2f}",
                'risk': risk,
                'priority': priority,
                'reasoning': reasoning,
                'quality_score': quality
            })
            
            result['summary']['total_potential_profit'] += profit
        
        # Organiser par semaines
        for week_num in sorted(weeks_data.keys()):
            games = weeks_data[week_num]
            total_profit = sum(float(g['profit_potential'].replace('$', '')) for g in games)
            
            result['weeks'].append({
                'week_number': week_num,
                'games_count': len(games),
                'total_profit': total_profit,
                'games': games
            })
        
        return result
    
    def display_calendar(self, calendar_data: Dict):
        """Affiche le calendrier de fa√ßon lisible"""
        print("üèí" * 80)
        print("üìÖ CALENDRIER NHL 2025-26 - PARIS RECOMMAND√âS")
        print("üèí" * 80)
        
        if calendar_data.get('error'):
            print(f"‚ùå ERREUR: {calendar_data['error']}")
            return
        
        # R√©sum√© g√©n√©ral
        summary = calendar_data['summary']
        print(f"üìä FORMAT: {calendar_data['format'].upper()}")
        print(f"üéØ TOTAL RECOMMANDATIONS: {summary['total_recommendations']}")
        
        if 'selection_rate' in summary:
            print(f"üìà TAUX S√âLECTION: {summary['selection_rate']}")
        
        total_profit = summary.get('total_potential_profit', 0)
        if isinstance(total_profit, str):
            print(f"üí∞ PROFIT POTENTIEL TOTAL: {total_profit}")
        else:
            print(f"üí∞ PROFIT POTENTIEL TOTAL: ${total_profit:.2f}")
        
        print("\\n" + "=" * 80)
        
        # Affichage par semaines
        if not calendar_data['weeks']:
            print("üìÖ Aucune recommandation trouv√©e")
            return
        
        for week_data in calendar_data['weeks']:
            week_num = week_data['week_number']
            games_count = week_data['games_count']
            week_profit = week_data['total_profit']
            
            print(f"\\nüìÖ SEMAINE {week_num}")
            print("‚îÄ" * 50)
            print(f"üé≤ Paris: {games_count} | üí∞ Profit potentiel: ${week_profit:.2f}")
            print()
            
            for i, game in enumerate(week_data['games'], 1):
                priority_emoji = ["üî¥", "üü°", "üü¢"][game['priority'] - 1]
                risk_emoji = {"HIGH": "‚ö†Ô∏è", "MEDIUM": "‚ö°", "LOW": "‚úÖ"}[game['risk']]
                
                print(f"   {i}. {priority_emoji} {game['date']} | {game['matchup']}")
                print(f"      üéØ {game['bet']} | Conf: {game['confidence']} | EV: {game['expected_value']}")
                print(f"      üí∞ {game['profit_potential']} | {risk_emoji} {game['risk']}")
                
                if 'reasoning' in game and game['reasoning']:
                    print(f"      üìù {game['reasoning']}")
                
                print()
        
        print("üèÜ FIN DU CALENDRIER")
        print("‚îÅ" * 80)
        print("üìç L√âGENDE:")
        print("   üü¢ Priorit√© 1 (Haute) | üü° Priorit√© 2 (Moyenne) | üî¥ Priorit√© 3 (Basse)")
        print("   ‚úÖ Risque Faible | ‚ö° Risque Moyen | ‚ö†Ô∏è Risque √âlev√©")

def main():
    """Fonction principale"""
    import sys
    
    reader = CalendrierNHLReader()
    
    # D√©terminer le fichier √† lire
    if len(sys.argv) > 1:
        filename = sys.argv[1]
    else:
        filename = reader.find_latest_calendar_file()
        if not filename:
            print("‚ùå Aucun fichier calendrier trouv√©")
            print("\\nüìÅ FICHIERS DISPONIBLES:")
            for f in os.listdir('.'):
                if any(f.endswith(ext) for ext in reader.formats_supported):
                    print(f"   ‚Ä¢ {f}")
            return
        
        print(f"üìÑ FICHIER AUTO-D√âTECT√â: {filename}")
    
    # V√©rifier existence
    if not os.path.exists(filename):
        print(f"‚ùå FICHIER NON TROUV√â: {filename}")
        return
    
    print(f"üìÖ LECTURE CALENDRIER NHL: {filename}")
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # Lire selon l'extension
        if filename.endswith('.json'):
            calendar_data = reader.read_json_calendar(filename)
        elif filename.endswith('.csv'):
            calendar_data = reader.read_csv_calendar(filename)
        elif filename.endswith('.db'):
            calendar_data = reader.read_db_calendar(filename)
        else:
            print(f"‚ùå FORMAT NON SUPPORT√â: {filename}")
            return
        
        # Afficher le calendrier
        reader.display_calendar(calendar_data)
        
    except Exception as e:
        print(f"‚ùå ERREUR LECTURE: {e}")

if __name__ == "__main__":
    main()
